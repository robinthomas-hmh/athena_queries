with 
raw_data as (
  select userid,
  eventtime,
  eventsubtype,
  COALESCE(TRY(actor.roles[1]), null) AS roles,
  timestamp,
  concat(day, '-',month,'-',year) AS dt
  FROM ubd_events
    WHERE eventAction = 'NavigatedTo'
            AND eventtype != 'ViewEvent'
            AND LENGTH(eventsubtype) != 0
           -- AND ( actor.roles = array['Learner'] OR actor.roles = array['Instructor'] ) 
   -- AND actor.roles = array['Instructor']
   AND actor.roles = array['Learner']
    AND actor.districtpid NOT LIKE '91%'
            AND actor.districtpid NOT LIKE '92%'
            AND actor.districtpid NOT LIKE '79%'
            AND actor.districtpid NOT LIKE '88%'
            AND target.extensions['autoGenerated'] = 'false'
            AND year = '2019'
            AND month = '04'
),
base_data as(
SELECT *,
Lead(eventsubtype, 1) OVER(partition BY userid, dt ORDER BY  eventtime) AS next_event, 
Lead(CAST(to_unixtime(from_iso8601_timestamp(eventtime)) AS BIGINT), 1) OVER(partition BY userid, dt ORDER BY  eventtime) AS next_time
from raw_data
),

big_data as(
select *,
         CASE
         WHEN LENGTH(next_event) > 0 
         THEN date_diff('millisecond',from_iso8601_timestamp(eventtime), Lead(from_iso8601_timestamp(eventtime), 1) OVER(partition BY userid, dt ORDER BY  eventtime))
         ELSE 0
         END AS time_diff,
         COALESCE(TRY(LENGTH(next_event)), 0) AS next_event_len
         from base_data
),
final_data AS 
(
    SELECT userid,
        roles,
        CASE
        WHEN regexp_extract(eventsubtype,'^.*?(?=[\.]|$)') IN ('datareporting', 'CreateAssignment', 'StudentAssignmentList', 'AssignmentList', 'ManualScoring') 
        THEN
        regexp_extract(eventsubtype,'^.*?([\.]|$).*?([\.]|$).*?(?=\.|$)')
        ELSE 
        regexp_extract(eventsubtype, '^.*?([\.]|$).*?(?=\.|$)')
        END AS event,
        CASE
        WHEN regexp_extract(next_event,'^.*?(?=[\.]|$)') IN ('datareporting', 'CreateAssignment', 'StudentAssignmentList', 'AssignmentList', 'ManualScoring') 
        THEN
        regexp_extract(next_event,'^.*?([\.]|$).*?([\.]|$).*?(?=\.|$)')
        ELSE regexp_extract(next_event, '^.*?([\.]|$).*?(?=\.|$)')
        END AS event_next, time_diff, dt
    FROM big_data
    WHERE ( eventsubtype<>next_event OR (eventsubtype = next_event AND time_diff NOT BETWEEN 1 AND 600))
    AND time_diff > 500
    AND next_event is NOT NULL
    AND next_event_len > 0
),
aggr_data AS
(
SELECT userid, roles, event,event_next,
concat(event, '->',event_next) AS event_seq,
       time_diff
    from final_data
)
select event_seq,
       array_agg(time_diff) as arr
FROM aggr_data
GROUP BY event_seq
order by event_seq



==========================================================

==========================================================
with 
raw_data as (
  select userid,
  eventtime,
  eventsubtype,
  COALESCE(TRY(actor.roles[1]), null) AS roles,
  timestamp,
  concat(day, '-',month,'-',year) AS dt
  FROM ubd_events
    WHERE eventAction = 'NavigatedTo'
            AND eventtype != 'ViewEvent'
            AND LENGTH(eventsubtype) != 0
            AND ( actor.roles = array['Learner'] OR actor.roles = array['Instructor'] ) 
  -- AND actor.roles = array['Instructor']
  -- AND actor.roles = array['Learner']
    AND actor.districtpid NOT LIKE '91%'
            AND actor.districtpid NOT LIKE '92%'
            AND actor.districtpid NOT LIKE '79%'
            AND actor.districtpid NOT LIKE '88%'
            AND target.extensions['autoGenerated'] = 'false'
            AND year = '2019'
            AND month = '04'
--  and day in ('01','02','03')
),
base_data as(
SELECT *,
Lead(eventsubtype, 1) OVER(partition BY userid, dt ORDER BY  eventtime) AS next_event, 
Lead(CAST(to_unixtime(from_iso8601_timestamp(eventtime)) AS BIGINT), 1) OVER(partition BY userid, dt ORDER BY  eventtime) AS next_time
from raw_data
),

big_data as(
select *,
         CASE
         WHEN LENGTH(next_event) > 0 
         THEN date_diff('millisecond',from_iso8601_timestamp(eventtime), Lead(from_iso8601_timestamp(eventtime), 1) OVER(partition BY userid, dt ORDER BY  eventtime))
         ELSE 0
         END AS time_diff,
         COALESCE(TRY(LENGTH(next_event)), 0) AS next_event_len
         from base_data
),
d1 as (
    SELECT userid, eventtime,
        roles,
        CASE
        WHEN regexp_extract(eventsubtype,'^.*?(?=[\.]|$)') IN ('datareporting', 'CreateAssignment', 'StudentAssignmentList', 'AssignmentList', 'ManualScoring') 
        THEN
        regexp_extract(eventsubtype,'^.*?([\.]|$).*?([\.]|$).*?(?=\.|$)')
        ELSE 
        regexp_extract(eventsubtype, '^.*?([\.]|$).*?(?=\.|$)')
        END AS event,
        CASE
        WHEN regexp_extract(next_event,'^.*?(?=[\.]|$)') IN ('datareporting', 'CreateAssignment', 'StudentAssignmentList', 'AssignmentList', 'ManualScoring') 
        THEN
        regexp_extract(next_event,'^.*?([\.]|$).*?([\.]|$).*?(?=\.|$)')
        ELSE regexp_extract(next_event, '^.*?([\.]|$).*?(?=\.|$)')
        END AS event_next, time_diff, dt
    FROM big_data
    WHERE ( eventsubtype<>next_event OR (eventsubtype = next_event AND time_diff NOT BETWEEN 1 AND 600) OR next_event_len = 0)
    AND ((time_diff > 500 AND time_diff < 8280000 ) OR (time_diff = 0 AND next_event_len = 0))
    order by dt,eventtime  
),
d2 as(
select userid,
dt,
array_agg(event) as arr
from d1
group by userid, dt
order by userid, dt
)
select userid,dt,cardinality(arr) as arr_len, arr from d2
where cardinality(arr) < 3000