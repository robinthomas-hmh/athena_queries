CREATE OR REPLACE VIEW v_active_oac_managed_sections AS 
select 
oms.orgrefid,
oms.sectionrefid,
org_sec.organizationsectionstart,
org_sec.organizationsectionend
from "devtest"."oac_managed_sections" oms
JOIN "staging_prod"."v_organizations_sections_history" org_sec ON oms.sectionrefid = org_sec.sectionrefid
where LENGTH(org_sec.organizationsectionend) = 0


CREATE EXTERNAL TABLE `oac_managed_sections`(
  `orgrefid` string COMMENT '', 
  `sectionrefid` string COMMENT '')
ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'
WITH SERDEPROPERTIES (
   'separatorChar' = ',',
   'quoteChar' = '"',
   'escapeChar' = '\\'
   )
STORED AS TEXTFILE
LOCATION
  's3://datascience-pages/table_oac'
TBLPROPERTIES (
  "skip.header.line.count"="1",
  'has_encrypted_data'='false')


CREATE TABLE "prod_analysis"."ubd_teachers_logins" AS
select distinct userid, eventaction, actor.roles
from "staging_prod"."ubd_events" 
where  eventaction = 'LoggedIn' AND
actor.roles = array['Instructor'] AND
actor.districtpid NOT LIKE '91%'
AND actor.districtpid NOT LIKE '92%'
AND actor.districtpid NOT LIKE '79%'
AND actor.districtpid NOT LIKE '88%'
and year = '2019' 
and month IN ('08','09','10')
order by 1



CREATE TABLE ubd_student_programid_data AS
WITH eve_prog AS (
select 
userid,
actor.roles as "roles",
target."programid" AS "programid"
from "staging_prod"."ubd_events" 
where actor.roles = array['Learner']
AND actor.districtpid NOT LIKE '91%'
AND actor.districtpid NOT LIKE '92%'
AND actor.districtpid NOT LIKE '79%'
AND actor.districtpid NOT LIKE '88%'
AND target.extensions['autoGenerated'] = 'false'  
and "substr"("target"."programid", 1, 2) <> 'I_'
and LENGTH(target.programid) > 0
and year = '2019' and month IN ('08','09', '10') -- and day = '30'
  )
  select distinct *
                   from eve_prog
                   group by 1,2,3
                   order by 1

----------------------------

CREATE TABLE "prod_analysis"."current_ids_data" AS
WITH 
ids_dat AS
(
select refid,
       max(dt) as max_dt
       from "ids_streaming_events"."prod_hmheng_idm_production_ids_orgusers"
       group by 1
  )
select 
ids.refid,
ids.username,
ids.email,
ids.firstname,
ids.lastname
ids.dt
from "ids_streaming_events"."prod_hmheng_idm_production_ids_orgusers" ids
JOIN ids_dat ON ids.refid = ids_dat.refid AND ids.dt = ids_dat.max_dt
order by 2



/*
All non managed----------------------------

*/

CREATE TABLE non_managed_sections AS
WITH
dat AS (
select 
all_org.statecode      AS  "state_code",
org.ultimateorgrefid   AS  "parent_org",
org.ultimatename       AS  "parent_org_name",
org.ultimatepid        AS  "parent_pid",
org.ultimateorgtype    AS  "parent_type",
org.orgrefid           AS  "child_org",
org.name               AS  "child_name",
org.pid                AS  "child_pid",  
org.orgtype            AS  "org_type",
sec_user.userrefid     AS  "userrefid",
sec_user.usertype      AS  "user_type",
sec.sectionrefid       AS  "section_refid",
sec.name               AS  "section_name"
from "staging_prod"."v_organizations_enriched"  org
join "staging_prod"."v_organizations"           all_org    ON org.orgrefid          = all_org.orgrefid
join "staging_prod"."v_organizations_sections"  org_sec    ON org.orgrefid          = org_sec.orgrefid
join "staging_prod"."v_sections_users"          sec_user   ON org_sec.sectionrefid  = sec_user.sectionrefid
join "staging_prod"."v_sections"                sec        ON sec_user.sectionrefid = sec.sectionrefid
JOIN (
   SELECT DISTINCT
            COALESCE(child_org.orgrefid,orgs.orgrefid) AS orgrefid
       FROM "staging_prod"."v_organizations_enriched" orgs
       JOIN "staging_prod"."view_entitlements_consolidated" ent ON (orgs.orgrefid = ent.org_sif_uuid)
  LEFT JOIN "staging_prod"."v_organizations_enriched" child_org ON (child_org.ultimatepid = CASE WHEN orgs.ultimatepid = orgs.pid
                                                                                THEN orgs.ultimatepid
                                                                                ELSE NULL
                                                   END)
      WHERE orgs.category = 'Paying' AND TRIM(orgs.pid) <> '' -- Get entitlements for live orgs
            AND ent.ent_is_active = '1.0000000000' -- Bring in active entitlements only
            AND ent.soli_is_fulfilled = '1' -- Bring in active entitlements only
            AND ent.soli_egood_flag_id = '18' -- SAP orders for ED
  )
   dist_orgs ON org.orgrefid = dist_orgs.orgrefid

where org.category = 'Paying' AND
      trim(org.pid) <> ''  -- AND
       -- sec_user.usertype = 'leadTeachers'
-- order by 1,2,6,10,12
  ),
non_managed as
(
select * 
  from dat 
  where NOT EXISTS 
        (select 1 from "prod_analysis"."v_active_oac_managed_sections" oms 
                  where oms.sectionrefid = dat.section_refid )
),
non_managed_sections AS 
(
select 
 state_code,
 parent_org,
 parent_org_name,
 parent_pid,
 parent_type,
 child_org,
 child_name,
 child_pid,  
 org_type,
 userrefid,
 user_type,
 section_refid,
 section_name
from non_managed 
WHERE NOT EXISTS
          ( select 1 from "prod_analysis"."ubd_teachers_logins" ubd_teacher
                     where ubd_teacher.userid = non_managed.userrefid )
AND user_type = 'leadTeachers'
)
select distinct * from non_managed_sections
order by 1,2,3,4,5,6,7,8,9,10,11,12,13


-- ===================================


CREATE TABLE ubd_user_program_data AS
WITH eve_prog AS (
select userid,
target.programid AS "programid"
from "staging_prod"."ubd_events" 
where actor.roles = array['Learner']
AND actor.districtpid NOT LIKE '91%'
AND actor.districtpid NOT LIKE '92%'
AND actor.districtpid NOT LIKE '79%'
AND actor.districtpid NOT LIKE '88%'
AND target.extensions['autoGenerated'] = 'false'  
and "substr"("target"."programid", 1, 2) <> 'I_'
and LENGTH(target.programid) > 0
and year = '2019' and month IN ('08','09') -- and day = '30'
  )
  select distinct userid, 
       array_join(array_agg(distinct programid),', ') AS "program_id"
       from eve_prog
       group by 1
       
-- drop table ubd_user_program_data

-- ============================================
-- ============================================
-- ============================================
-- ============================================
-- ============================================-- ============================================
-- ============================================
-- ============================================
-- ============================================
-- ============================================-- ============================================-- ============================================

WITH
dat AS (
select 
all_org.statecode      AS  "state_code",
org.ultimateorgrefid   AS  "parent_org",
org.ultimatename       AS  "parent_org_name",
org.ultimatepid        AS  "parent_pid",
org.ultimateorgtype    AS  "parent_type",
org.orgrefid           AS  "child_org",
org.name               AS  "child_name",
org.pid                AS  "child_pid",  
org.orgtype            AS  "org_type",
sec_user.userrefid     AS  "userrefid",
sec_user.usertype      AS  "user_type",
sec.sectionrefid       AS  "section_refid",
sec.name               AS  "section_name"
from v_organizations_enriched  org
join v_organizations           all_org    ON org.orgrefid          = all_org.orgrefid
join v_organizations_sections  org_sec    ON org.orgrefid          = org_sec.orgrefid
join v_sections_users          sec_user   ON org_sec.sectionrefid  = sec_user.sectionrefid
join v_sections                sec        ON sec_user.sectionrefid = sec.sectionrefid
JOIN (
   SELECT DISTINCT
            COALESCE(child_org.orgrefid,orgs.orgrefid) AS orgrefid
       FROM v_organizations_enriched orgs
       JOIN view_entitlements_consolidated ent ON (orgs.orgrefid = ent.org_sif_uuid)
  LEFT JOIN v_organizations_enriched child_org ON (child_org.ultimatepid = CASE WHEN orgs.ultimatepid = orgs.pid
                                                                                THEN orgs.ultimatepid
                                                                                ELSE NULL
                                                   END)
      WHERE -- orgs.orgrefid = '9458d33f-1e96-4087-917a-14209bde99fc' AND 
            orgs.category = 'Paying' AND TRIM(orgs.pid) <> '' -- Get entitlements for live orgs
            AND ent.ent_is_active = '1.0000000000' -- Bring in active entitlements only
            AND ent.soli_is_fulfilled = '1' -- Bring in active entitlements only
            AND ent.soli_egood_flag_id = '18' -- SAP orders for ED
  )
   dist_orgs ON org.orgrefid = dist_orgs.orgrefid

where -- org.orgrefid ='0caf1d47-94c8-4823-aad3-375053ad6ed9' AND 
      org.category = 'Paying' AND
      trim(org.pid) <> '' AND
      sec_user.usertype = 'students'
order by 1,2,6,10,12
  ),
non_managed as
(
select * 
  from dat 
  where NOT EXISTS 
        (select 1 from "devtest"."v_active_oac_managed_sections" oms 
                  where oms.sectionrefid = dat.section_refid )
)
select * from non_managed


==========t_non_managed_section_users========


/*( NON MANAGED SECTIONS AND PROGRAMS FOR ORGS) */

WITH
dat AS (
select 
all_org.statecode      AS  "state_code",
org.ultimateorgrefid   AS  "parent_org",
org.ultimatename       AS  "parent_org_name",
org.ultimatepid        AS  "parent_pid",
org.ultimateorgtype    AS  "parent_type",
org.orgrefid           AS  "child_org",
org.name               AS  "child_name",
org.pid                AS  "child_pid",  
org.orgtype            AS  "child_type",
sec_user.userrefid     AS  "userrefid",
sec_user.usertype      AS  "user_type",
sec.sectionrefid       AS  "section_refid",
sec.name               AS  "section_name"
from "staging_prod"."v_organizations_enriched"  org
join "staging_prod"."v_organizations"           all_org    ON org.orgrefid          = all_org.orgrefid
join "staging_prod"."v_organizations_sections"  org_sec    ON org.orgrefid          = org_sec.orgrefid
join "staging_prod"."v_sections_users"          sec_user   ON org_sec.sectionrefid  = sec_user.sectionrefid
join "staging_prod"."v_sections"                sec        ON sec_user.sectionrefid = sec.sectionrefid
where org.category = 'Paying' AND
      trim(org.pid) <> ''     AND
      sec_user.usertype = 'students' AND
      org_sec.sectionrefid IN (select section_refid from "prod_analysis"."non_managed_sections"  )
order by 1,2,6,10,12
  ),
  org_data AS (
  select 
  dat.state_code,
  dat.parent_org,
  dat.parent_org_name,
  dat.parent_pid,
  dat.parent_type,
  dat.child_org,
  dat.child_name,
  dat.child_pid,
  dat.child_type,
  -- dat.user_type,    
  -- dat.userid,
    prog.programid,
  dat.section_refid
  -- dat.section_name  
  from dat
  JOIN ubd_student_programid_data prog
  on dat.userrefid = prog.userid
  )
  select 
  state_code,
  parent_org,
  parent_org_name,
  parent_pid,
  parent_type,
  child_org,
  child_name,
  child_pid,
  child_type,
  programid,
  array_join(array_agg(section_refid),', ') as "sections"
  from org_data
  group by 1,2,3,4,5,6,7,8,9,10
  order by 1,2,3,4,5,6,7,8,9,10

  -- ===============================================

 -- =============== PROGRAM ID DATA ================================

WITH
dat AS (
select 
parent_org.statecode   AS  "state_code",
org.ultimateorgrefid   AS  "parent_org",
org.ultimatename       AS  "parent_org_name",
org.ultimatepid        AS  "parent_pid",
org.ultimateorgtype    AS  "parent_type",
org.orgrefid           AS  "child_org",
org.name               AS  "child_name",
org.pid                AS  "child_pid",  
org.orgtype            AS  "child_type",
sec_user.userrefid     AS  "userrefid",
sec_user.usertype      AS  "user_type",
sec.sectionrefid       AS  "section_refid",
sec.name               AS  "section_name"
from "staging_prod"."v_organizations_enriched"  org
join "staging_prod"."v_organizations"           parent_org ON org.ultimateorgrefid     = parent_org.orgrefid
join "staging_prod"."v_organizations"           all_org    ON org.orgrefid             = all_org.orgrefid
join "staging_prod"."v_organizations_sections"  org_sec    ON org.orgrefid             = org_sec.orgrefid
join "staging_prod"."v_sections_users"          sec_user   ON org_sec.sectionrefid     = sec_user.sectionrefid
join "staging_prod"."v_sections"                sec        ON sec_user.sectionrefid    = sec.sectionrefid
where org.category = 'Paying' AND
      trim(org.pid) <> ''     AND
      sec_user.usertype = 'students' AND
      org_sec.sectionrefid IN (select section_refid from "prod_analysis"."non_managed_sections"  ) 
order by 1,2,6,10,12
  ),
  org_data AS (
  select 
  dat.state_code,
  dat.parent_org,
  dat.parent_org_name,
  dat.parent_pid,
  dat.parent_type,
  dat.child_org,
  dat.child_name,
  dat.child_pid,
  dat.child_type,
  -- dat.user_type,    
  -- dat.userid,
    prog.programid,
  dat.section_refid
  -- dat.section_name  
  from dat
  JOIN ubd_student_programid_data prog
  on dat.userrefid = prog.userid
  )
  select distinct
  state_code,
  parent_org,
  parent_org_name,
  parent_pid,
  parent_type,
  child_org,
  child_name,
  child_pid,
  child_type,
  programid,
  array_join(array_distinct(array_agg(section_refid)),', ') as "sections"
  from org_data
  group by 1,2,3,4,5,6,7,8,9,10
  order by 1,2,3,4,5,6,7,8,9,10



